version: '3.8'

services:
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    container_name: infra_minio
    command: server --console-address ":9001" /data/
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    networks:
      - mlflow_network

  db:
    container_name: infra_db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mlflow_network

  mlflow:
    container_name: infra_mlflow
    restart: unless-stopped
    build:
      context: ./docker/infra/mlflow
      dockerfile: ./mlflow.dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}

      MLFLOW_PORT: ${MLFLOW_PORT:-8000}
      MLFLOW_TRACKING_USERNAME: ${MLFLOW_USER}
      MLFLOW_TRACKING_PASSWORD: ${MLFLOW_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks:
      - mlflow_network

  nginx:
    container_name: infra_nginx
    restart: unless-stopped
    build:
      context: ./docker/infra/nginx
      dockerfile: ./nginx.dockerfile
    environment:
      MLFLOW_PORT: ${MLFLOW_PORT}
      MLFLOW_USER: ${MLFLOW_USER}
      MLFLOW_PASSWORD: ${MLFLOW_PASSWORD}
    ports:
      - 80:80
      - 443:443
    depends_on:
      - mlflow
    networks:
      - mlflow_network

  node_exporter:
    image: prom/node-exporter
    restart: unless-stopped
    networks:
      - metriks_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    expose:
      - 9100
    command:
      - --path.procfs=/host/proc
      - --path.rootfs=/rootfs
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)

  prometheus:
    build:
      context: ./docker/infra/prometheus
      dockerfile: prometheus.dockerfile
    restart: unless-stopped
    environment:
      INFERENCE_BACKEND_HOST: ${INFERENCE_BACKEND_HOST}
      INFERENCE_BACKEND_PORT: ${INFERENCE_BACKEND_PORT}


    ports:
      - 9090:9090
    networks:
      - metriks_network
    volumes:
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: dev_grafana
    restart: unless-stopped
    user: '472'
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml
    networks:
      - metriks_network
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false

volumes:
  postgres_data:
  minio_data:
  grafana_data:
  prometheus_data:

networks:
  mlflow_network:
    driver: bridge

  metriks_network:
    driver: bridge
